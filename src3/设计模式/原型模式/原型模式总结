传统的方法
缺点：创建新的对象时，重视需要重新获取原始对象的属性，若创建对象复杂，则效率低下
例如：
Sheep sheep = new Sheep("zyk",1,"white");
Sheep sheep2 = new Sheep(sheep.getName(), sheep.getAge(), sheep.getColor());
…………………………

原型模式：
是指用原型(初始)实例指定创建对象的种类，并且通过拷贝这些原型，创建新的对象
是创建型设计模式，允许一个对象再创建另一个可定制的对象，且无需知道创建细节

对象.clone()
本质：自我复制

浅拷贝：
默认情况为浅拷贝
对于数据类型是基本数据类型的成员变量，浅拷贝会直接传值给新对象（直接复制属性值）
对于数据类型是引用数据类型的成员变量，比如数组对象等，浅拷贝会进行引用传递，
将引用值复制给新的对象，在底层都指向同一片地址
例子克隆羊是浅拷贝
重写Cloneable接口下的clone()方法
浅拷贝默认使用clone()方法实现

深拷贝：
复制对象的所有基本数据类型的成员变量值
对整个对象（包括所有引用数据类型的成员变量及其引用的对象）进行拷贝
实现方法有两种：
重写Cloneable接口下的clone()方法
对象序列化(推荐使用)