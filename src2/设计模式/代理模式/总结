代理模式：
通过代理对象访问目标对象
在目标对象实现的基础上，扩展目标对象的功能
被代理的对象可以是：
    1.远程对象
    2.创建开销大的对象
    3.需要安全控制的对象
代理模式三种不同的形式：
    1.静态代理
    2.动态代理（JDK代理、接口代理）
    3.Cglib代理：
        前两种基于接口实现，这种代理可以在内存动态的创建对象，
        而不需要实现接口，属于动态代理的范畴

静态代理：
优点：在不修改目标对象的功能前提下，能通过代理对象对目标功能扩展
缺点：代理对象需要和目标对象实现同样的接口，所有会有很多代理类，
      接口增加方法，二者都要进行维护

动态代理（JDK代理，接口代理）：
代理对象不需要实现接口，目标对象要实现接口
代理对象是利用JDK的API，动态的在内存中构建代理对象
使用java.lang.reflect.Proxy中的newProxyInstance方法

Cglib代理（子类代理）：
前两者都需要目标对选哪个实现一个接口，Cglib可以代理一个单独的对象
此模式是在内存中构建一个子类对象，从而实现对目标对象功能扩展
Cglib是一个强大的高性能的代码生成包，可以在运行期间扩展java类和实现接口
如何在AOP编程中选择代理模式：
    1.目标对象需要实现接口，用JDK代理
    2.目标对象不需要实现接口，用Cglib代理
