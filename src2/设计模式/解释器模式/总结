这个模式也十分复杂，日后再深研究

解释器模式：
核心：给定一个语言（表达式），定义他的语法的一种表示，
     并定义一个解释器，使用该解释器来解释语言中的句子
     例如正则表达式

适用场景：
    1.将一个需要解释分析的语言中的句子表示为一个抽象语法树
    2.一些重复出现的问题可以用一种简单的语言来表达
    3.一个简单语法需要解释的场景

成员：
Context:是环境角色，含有解释器之外的全局信息
AbstractExpression:抽象表达式，声明一个抽象的解释操作
TerminalExpression:终结符表达式，实现与文法中的终结符相关的解释操作
NonTerminalExpression:非终结符表达式，为文法中的非终结符实现解释操作

优点：
让程序有更好的扩展性
缺点：
会引起类的膨胀，使用递归调用，会导致调试十分复杂，效率可能降低
